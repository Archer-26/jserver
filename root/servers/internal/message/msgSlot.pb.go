// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        (unknown)
// source: msgSlot.proto

package message

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 同步老虎机及相关数据
type NotifySlotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBetOdds int64 `protobuf:"varint,2,opt,name=LastBetOdds,json=lastBetOdds,proto3" json:"LastBetOdds"` // 最后一次押注赔率
}

func (x *NotifySlotInfo) Reset() {
	*x = NotifySlotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifySlotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifySlotInfo) ProtoMessage() {}

func (x *NotifySlotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifySlotInfo.ProtoReflect.Descriptor instead.
func (*NotifySlotInfo) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{0}
}

func (x *NotifySlotInfo) GetLastBetOdds() int64 {
	if x != nil {
		return x.LastBetOdds
	}
	return 0
}

////////////////////////////////////////////// SPIN ///////////////////////////////////////////////////////////////////////
type SlotBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetLv int64 `protobuf:"varint,1,opt,name=BetLv,json=betLv,proto3" json:"BetLv"` // 下注等级
}

func (x *SlotBetReq) Reset() {
	*x = SlotBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotBetReq) ProtoMessage() {}

func (x *SlotBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotBetReq.ProtoReflect.Descriptor instead.
func (*SlotBetReq) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{1}
}

func (x *SlotBetReq) GetBetLv() int64 {
	if x != nil {
		return x.BetLv
	}
	return 0
}

type SlotBetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     MSG_RESULT `protobuf:"varint,1,opt,name=Result,json=result,proto3,enum=message.MSG_RESULT" json:"Result"` // 错误码
	BaseData   *Base      `protobuf:"bytes,2,opt,name=BaseData,json=baseData,proto3" json:"BaseData"`                    // base玩法信息
	SelectPlay bool       `protobuf:"varint,10,opt,name=SelectPlay,json=selectPlay,proto3" json:"SelectPlay"`            // 是否触发选择玩法
	BonusData  *Bonus     `protobuf:"bytes,20,opt,name=BonusData,json=bonusData,proto3" json:"BonusData"`                // 触发的Bonus相关数据
	TotalGold  int64      `protobuf:"varint,30,opt,name=TotalGold,json=totalGold,proto3" json:"TotalGold"`               // 总赢利的金币
}

func (x *SlotBetRes) Reset() {
	*x = SlotBetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotBetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotBetRes) ProtoMessage() {}

func (x *SlotBetRes) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotBetRes.ProtoReflect.Descriptor instead.
func (*SlotBetRes) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{2}
}

func (x *SlotBetRes) GetResult() MSG_RESULT {
	if x != nil {
		return x.Result
	}
	return MSG_RESULT_SUCCESS
}

func (x *SlotBetRes) GetBaseData() *Base {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *SlotBetRes) GetSelectPlay() bool {
	if x != nil {
		return x.SelectPlay
	}
	return false
}

func (x *SlotBetRes) GetBonusData() *Bonus {
	if x != nil {
		return x.BonusData
	}
	return nil
}

func (x *SlotBetRes) GetTotalGold() int64 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

// base玩法信息
type Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandIndex   []int64         `protobuf:"varint,1,rep,packed,name=RandIndex,json=randIndex,proto3" json:"RandIndex"`                                                                       // 5个基础轮盘随机的位置
	BaseReels   []int64         `protobuf:"varint,2,rep,packed,name=BaseReels,json=baseReels,proto3" json:"BaseReels"`                                                                       // 基础轮盘停下后3行5列的值 0-14
	RewardLines *RewardLine     `protobuf:"bytes,3,opt,name=RewardLines,json=rewardLines,proto3" json:"RewardLines"`                                                                         // 中奖线及连数信息
	WinTypeId   int64           `protobuf:"varint,4,opt,name=WinTypeId,json=winTypeId,proto3" json:"WinTypeId"`                                                                              // 赢利类型Id (CherryWinType表的ID)
	LineGlod    int64           `protobuf:"varint,5,opt,name=LineGlod,json=lineGlod,proto3" json:"LineGlod"`                                                                                 // 总线赢利的金币
	Items       map[int32]int64 `protobuf:"bytes,6,rep,name=Items,json=items,proto3" json:"Items" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 掉落道具
}

func (x *Base) Reset() {
	*x = Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{3}
}

func (x *Base) GetRandIndex() []int64 {
	if x != nil {
		return x.RandIndex
	}
	return nil
}

func (x *Base) GetBaseReels() []int64 {
	if x != nil {
		return x.BaseReels
	}
	return nil
}

func (x *Base) GetRewardLines() *RewardLine {
	if x != nil {
		return x.RewardLines
	}
	return nil
}

func (x *Base) GetWinTypeId() int64 {
	if x != nil {
		return x.WinTypeId
	}
	return 0
}

func (x *Base) GetLineGlod() int64 {
	if x != nil {
		return x.LineGlod
	}
	return 0
}

func (x *Base) GetItems() map[int32]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

// 中奖线ID，以及连数
type RewardLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alter map[int64]int64 `protobuf:"bytes,1,rep,name=Alter,json=alter,proto3" json:"Alter" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map<线ID，连数>
}

func (x *RewardLine) Reset() {
	*x = RewardLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardLine) ProtoMessage() {}

func (x *RewardLine) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardLine.ProtoReflect.Descriptor instead.
func (*RewardLine) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{4}
}

func (x *RewardLine) GetAlter() map[int64]int64 {
	if x != nil {
		return x.Alter
	}
	return nil
}

// Bonus数据
type Bonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombineId   string          `protobuf:"bytes,1,opt,name=CombineId,json=combineId,proto3" json:"CombineId"`                                                                               // 合并ID 空字符，表示没有触发bonus
	TriggerRow  int64           `protobuf:"varint,2,opt,name=TriggerRow,json=triggerRow,proto3" json:"TriggerRow"`                                                                           // 触发Bonus行数 0-2
	Option      int64           `protobuf:"varint,3,opt,name=Option,json=option,proto3" json:"Option"`                                                                                       // 1.选择Option1 2.选择Option2
	BonusReelId []int64         `protobuf:"varint,4,rep,packed,name=BonusReelId,json=bonusReelId,proto3" json:"BonusReelId"`                                                                 // 每个格子，单独需要选择的轮盘Id 0-4
	Games       []*BonusGame    `protobuf:"bytes,5,rep,name=Games,json=games,proto3" json:"Games"`                                                                                           // bonus每次转动信息
	BonusGlod   int64           `protobuf:"varint,6,opt,name=BonusGlod,json=bonusGlod,proto3" json:"BonusGlod"`                                                                              // bonus和jackpot总赢利的金币
	Items       map[int32]int64 `protobuf:"bytes,7,rep,name=Items,json=items,proto3" json:"Items" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 掉落道具
}

func (x *Bonus) Reset() {
	*x = Bonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus) ProtoMessage() {}

func (x *Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus.ProtoReflect.Descriptor instead.
func (*Bonus) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{5}
}

func (x *Bonus) GetCombineId() string {
	if x != nil {
		return x.CombineId
	}
	return ""
}

func (x *Bonus) GetTriggerRow() int64 {
	if x != nil {
		return x.TriggerRow
	}
	return 0
}

func (x *Bonus) GetOption() int64 {
	if x != nil {
		return x.Option
	}
	return 0
}

func (x *Bonus) GetBonusReelId() []int64 {
	if x != nil {
		return x.BonusReelId
	}
	return nil
}

func (x *Bonus) GetGames() []*BonusGame {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *Bonus) GetBonusGlod() int64 {
	if x != nil {
		return x.BonusGlod
	}
	return 0
}

func (x *Bonus) GetItems() map[int32]int64 {
	if x != nil {
		return x.Items
	}
	return nil
}

// Bonus玩法轮询信息
type BonusGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusGridVal []int64 `protobuf:"varint,1,rep,packed,name=BonusGridVal,json=bonusGridVal,proto3" json:"BonusGridVal"` // 每个格子随机得到的轮盘Id
	BonusReels   []int64 `protobuf:"varint,2,rep,packed,name=BonusReels,json=bonusReels,proto3" json:"BonusReels"`       // 停下后3行5列的值 0-14
	ResetCount   bool    `protobuf:"varint,3,opt,name=ResetCount,json=resetCount,proto3" json:"ResetCount"`              // 本轮转动是否重置次数
}

func (x *BonusGame) Reset() {
	*x = BonusGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BonusGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BonusGame) ProtoMessage() {}

func (x *BonusGame) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BonusGame.ProtoReflect.Descriptor instead.
func (*BonusGame) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{6}
}

func (x *BonusGame) GetBonusGridVal() []int64 {
	if x != nil {
		return x.BonusGridVal
	}
	return nil
}

func (x *BonusGame) GetBonusReels() []int64 {
	if x != nil {
		return x.BonusReels
	}
	return nil
}

func (x *BonusGame) GetResetCount() bool {
	if x != nil {
		return x.ResetCount
	}
	return false
}

////////////////////////////////////////////// SELECT ///////////////////////////////////////////////////////////////////////
type SlotSelectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select int64 `protobuf:"varint,1,opt,name=Select,json=select,proto3" json:"Select"` // 1.Bonus  2.Free
}

func (x *SlotSelectReq) Reset() {
	*x = SlotSelectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotSelectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotSelectReq) ProtoMessage() {}

func (x *SlotSelectReq) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotSelectReq.ProtoReflect.Descriptor instead.
func (*SlotSelectReq) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{7}
}

func (x *SlotSelectReq) GetSelect() int64 {
	if x != nil {
		return x.Select
	}
	return 0
}

type SlotSelectRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    MSG_RESULT  `protobuf:"varint,1,opt,name=Result,json=result,proto3,enum=message.MSG_RESULT" json:"Result"` // 错误码
	Select    int64       `protobuf:"varint,2,opt,name=Select,json=select,proto3" json:"Select"`                         // 1.Bonus  2.Free
	RandRow   int64       `protobuf:"varint,3,opt,name=RandRow,json=randRow,proto3" json:"RandRow"`                      // bonus select 表随机的行
	BonusData *Bonus      `protobuf:"bytes,4,opt,name=BonusData,json=bonusData,proto3" json:"BonusData"`
	Games     []*FreeGame `protobuf:"bytes,10,rep,name=games,proto3" json:"games"` // Free玩法轮询
}

func (x *SlotSelectRes) Reset() {
	*x = SlotSelectRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotSelectRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotSelectRes) ProtoMessage() {}

func (x *SlotSelectRes) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotSelectRes.ProtoReflect.Descriptor instead.
func (*SlotSelectRes) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{8}
}

func (x *SlotSelectRes) GetResult() MSG_RESULT {
	if x != nil {
		return x.Result
	}
	return MSG_RESULT_SUCCESS
}

func (x *SlotSelectRes) GetSelect() int64 {
	if x != nil {
		return x.Select
	}
	return 0
}

func (x *SlotSelectRes) GetRandRow() int64 {
	if x != nil {
		return x.RandRow
	}
	return 0
}

func (x *SlotSelectRes) GetBonusData() *Bonus {
	if x != nil {
		return x.BonusData
	}
	return nil
}

func (x *SlotSelectRes) GetGames() []*FreeGame {
	if x != nil {
		return x.Games
	}
	return nil
}

//Free玩法轮询信息
type FreeGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeCount int64  `protobuf:"varint,1,opt,name=FreeCount,json=freeCount,proto3" json:"FreeCount"` // 剩余免费次数
	BaseData  *Base  `protobuf:"bytes,2,opt,name=BaseData,json=baseData,proto3" json:"BaseData"`
	BonusData *Bonus `protobuf:"bytes,3,opt,name=BonusData,json=bonusData,proto3" json:"BonusData"` // 触发的Bonus玩法
}

func (x *FreeGame) Reset() {
	*x = FreeGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msgSlot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeGame) ProtoMessage() {}

func (x *FreeGame) ProtoReflect() protoreflect.Message {
	mi := &file_msgSlot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeGame.ProtoReflect.Descriptor instead.
func (*FreeGame) Descriptor() ([]byte, []int) {
	return file_msgSlot_proto_rawDescGZIP(), []int{9}
}

func (x *FreeGame) GetFreeCount() int64 {
	if x != nil {
		return x.FreeCount
	}
	return 0
}

func (x *FreeGame) GetBaseData() *Base {
	if x != nil {
		return x.BaseData
	}
	return nil
}

func (x *FreeGame) GetBonusData() *Bonus {
	if x != nil {
		return x.BonusData
	}
	return nil
}

var File_msgSlot_proto protoreflect.FileDescriptor

var file_msgSlot_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x53,
	0x6c, 0x6f, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x74,
	0x4c, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x65, 0x74, 0x4c, 0x76, 0x22,
	0xd0, 0x01, 0x0a, 0x0a, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f,
	0x6c, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x6e, 0x65, 0x47, 0x6c, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x65, 0x47, 0x6c, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x38, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb2, 0x02, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x6c, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x6c, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x72, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x47,
	0x72, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52,
	0x65, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x52, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x22,
	0xc5, 0x01, 0x0a, 0x0d, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x53, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x64, 0x52, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x77,
	0x12, 0x2c, 0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x52, 0x09, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x5a, 0x08, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msgSlot_proto_rawDescOnce sync.Once
	file_msgSlot_proto_rawDescData = file_msgSlot_proto_rawDesc
)

func file_msgSlot_proto_rawDescGZIP() []byte {
	file_msgSlot_proto_rawDescOnce.Do(func() {
		file_msgSlot_proto_rawDescData = protoimpl.X.CompressGZIP(file_msgSlot_proto_rawDescData)
	})
	return file_msgSlot_proto_rawDescData
}

var file_msgSlot_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_msgSlot_proto_goTypes = []interface{}{
	(*NotifySlotInfo)(nil), // 0: message.NotifySlotInfo
	(*SlotBetReq)(nil),     // 1: message.SlotBetReq
	(*SlotBetRes)(nil),     // 2: message.SlotBetRes
	(*Base)(nil),           // 3: message.Base
	(*RewardLine)(nil),     // 4: message.RewardLine
	(*Bonus)(nil),          // 5: message.Bonus
	(*BonusGame)(nil),      // 6: message.BonusGame
	(*SlotSelectReq)(nil),  // 7: message.SlotSelectReq
	(*SlotSelectRes)(nil),  // 8: message.SlotSelectRes
	(*FreeGame)(nil),       // 9: message.FreeGame
	nil,                    // 10: message.Base.ItemsEntry
	nil,                    // 11: message.RewardLine.AlterEntry
	nil,                    // 12: message.Bonus.ItemsEntry
	(MSG_RESULT)(0),        // 13: message.MSG_RESULT
}
var file_msgSlot_proto_depIdxs = []int32{
	13, // 0: message.SlotBetRes.Result:type_name -> message.MSG_RESULT
	3,  // 1: message.SlotBetRes.BaseData:type_name -> message.Base
	5,  // 2: message.SlotBetRes.BonusData:type_name -> message.Bonus
	4,  // 3: message.Base.RewardLines:type_name -> message.RewardLine
	10, // 4: message.Base.Items:type_name -> message.Base.ItemsEntry
	11, // 5: message.RewardLine.Alter:type_name -> message.RewardLine.AlterEntry
	6,  // 6: message.Bonus.Games:type_name -> message.BonusGame
	12, // 7: message.Bonus.Items:type_name -> message.Bonus.ItemsEntry
	13, // 8: message.SlotSelectRes.Result:type_name -> message.MSG_RESULT
	5,  // 9: message.SlotSelectRes.BonusData:type_name -> message.Bonus
	9,  // 10: message.SlotSelectRes.games:type_name -> message.FreeGame
	3,  // 11: message.FreeGame.BaseData:type_name -> message.Base
	5,  // 12: message.FreeGame.BonusData:type_name -> message.Bonus
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_msgSlot_proto_init() }
func file_msgSlot_proto_init() {
	if File_msgSlot_proto != nil {
		return
	}
	file_msgtype_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msgSlot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifySlotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotBetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BonusGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotSelectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotSelectRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msgSlot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msgSlot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msgSlot_proto_goTypes,
		DependencyIndexes: file_msgSlot_proto_depIdxs,
		MessageInfos:      file_msgSlot_proto_msgTypes,
	}.Build()
	File_msgSlot_proto = out.File
	file_msgSlot_proto_rawDesc = nil
	file_msgSlot_proto_goTypes = nil
	file_msgSlot_proto_depIdxs = nil
}
