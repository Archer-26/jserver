package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseFont.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseFontMap = map[string]*BaseFont{}
var _BaseFontArray = []*BaseFont{}

type BaseFont struct {
	data *_BaseFont
}

// 类型结构
type _BaseFont struct {
	STR_LANGUAGE string
	STR_FONT_1   string
	STR_FONT_2   string
	STR_DEFAULT  string
}

func (c *BaseFont) LANGUAGE() string { return c.data.STR_LANGUAGE } //
func (c *BaseFont) FONT_1() string   { return c.data.STR_FONT_1 }   //
func (c *BaseFont) FONT_2() string   { return c.data.STR_FONT_2 }   //
func (c *BaseFont) DEFAULT() string  { return c.data.STR_DEFAULT }  //

func HasBaseFont(key string) bool {
	_, ok := _BaseFontMap[key]
	return ok
}

func GetBaseFont(key string) *BaseFont {
	return _BaseFontMap[key]
}

func RangeBaseFont(fn func(i int, row *BaseFont) (stop bool)) {
	for i, row := range _BaseFontArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseFont() int { return len(_BaseFontArray) }

func init() {
	loadfn["BaseFont"] = loadBaseFont
}

func loadBaseFont(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseFont.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseFont{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseFont{}
	result_map := map[string]*BaseFont{}
	for _, row := range datas {
		data := &BaseFont{data: row}
		result_array = append(result_array, data)
		result_map[row.STR_LANGUAGE] = data
	}
	_BaseFontArray = result_array
	_BaseFontMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseFont load finish! ", len(result_array))
	return nil
}
