package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseIslandMain.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseIslandMainMap = map[int64]*BaseIslandMain{}
var _BaseIslandMainArray = []*BaseIslandMain{}

type BaseIslandMain struct {
	data *_BaseIslandMain
}

// 类型结构
type _BaseIslandMain struct {
	INT_ID                   int64     // 唯一ID
	STR_NAME                 string    // 岛屿名字 本地化
	STR_URL                  string    // 资源路径
	STR_ICON_URL             string    // 岛屿图标
	ARRAYINT_UNLOCK_BUILDING array_int // 解锁建筑
}

func (c *BaseIslandMain) ID() int64        { return c.data.INT_ID }       //唯一ID
func (c *BaseIslandMain) NAME() string     { return c.data.STR_NAME }     //岛屿名字 本地化
func (c *BaseIslandMain) URL() string      { return c.data.STR_URL }      //资源路径
func (c *BaseIslandMain) ICON_URL() string { return c.data.STR_ICON_URL } //岛屿图标
//解锁建筑
func (c *BaseIslandMain) Len_UNLOCK_BUILDING() int { return c.data.ARRAYINT_UNLOCK_BUILDING.Len() }
func (c *BaseIslandMain) Get_UNLOCK_BUILDING(key int) int64 {
	return c.data.ARRAYINT_UNLOCK_BUILDING.Get(key)
}
func (c *BaseIslandMain) Range_UNLOCK_BUILDING(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_UNLOCK_BUILDING.Range(fn)
}
func (c *BaseIslandMain) Copy_UNLOCK_BUILDING() array_int {
	return c.data.ARRAYINT_UNLOCK_BUILDING.Copy()
}

func HasBaseIslandMain(key int64) bool {
	_, ok := _BaseIslandMainMap[key]
	return ok
}

func GetBaseIslandMain(key int64) *BaseIslandMain {
	return _BaseIslandMainMap[key]
}

func RangeBaseIslandMain(fn func(i int, row *BaseIslandMain) (stop bool)) {
	for i, row := range _BaseIslandMainArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseIslandMain() int { return len(_BaseIslandMainArray) }

func init() {
	loadfn["BaseIslandMain"] = loadBaseIslandMain
}

func loadBaseIslandMain(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseIslandMain.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseIslandMain{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseIslandMain{}
	result_map := map[int64]*BaseIslandMain{}
	for _, row := range datas {
		data := &BaseIslandMain{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseIslandMainArray = result_array
	_BaseIslandMainMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseIslandMain load finish! ", len(result_array))
	return nil
}
