package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseRewardPool.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseRewardPoolMap = map[int64]*BaseRewardPool{}
var _BaseRewardPoolArray = []*BaseRewardPool{}

type BaseRewardPool struct {
	data *_BaseRewardPool
}

// 类型结构
type _BaseRewardPool struct {
	INT_REWARD_POOL    int64     // 奖励池id
	ARRAYINT_REWARD_ID array_int // 奖励id集合
	ARRAYINT_MIN_LV    array_int // 等级下限
	ARRAYINT_MAX_LV    array_int // 等级上限
}

func (c *BaseRewardPool) REWARD_POOL() int64 { return c.data.INT_REWARD_POOL } //奖励池id
//奖励id集合
func (c *BaseRewardPool) Len_REWARD_ID() int          { return c.data.ARRAYINT_REWARD_ID.Len() }
func (c *BaseRewardPool) Get_REWARD_ID(key int) int64 { return c.data.ARRAYINT_REWARD_ID.Get(key) }
func (c *BaseRewardPool) Range_REWARD_ID(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_REWARD_ID.Range(fn)
}
func (c *BaseRewardPool) Copy_REWARD_ID() array_int { return c.data.ARRAYINT_REWARD_ID.Copy() }

//等级下限
func (c *BaseRewardPool) Len_MIN_LV() int          { return c.data.ARRAYINT_MIN_LV.Len() }
func (c *BaseRewardPool) Get_MIN_LV(key int) int64 { return c.data.ARRAYINT_MIN_LV.Get(key) }
func (c *BaseRewardPool) Range_MIN_LV(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_MIN_LV.Range(fn)
}
func (c *BaseRewardPool) Copy_MIN_LV() array_int { return c.data.ARRAYINT_MIN_LV.Copy() }

//等级上限
func (c *BaseRewardPool) Len_MAX_LV() int          { return c.data.ARRAYINT_MAX_LV.Len() }
func (c *BaseRewardPool) Get_MAX_LV(key int) int64 { return c.data.ARRAYINT_MAX_LV.Get(key) }
func (c *BaseRewardPool) Range_MAX_LV(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_MAX_LV.Range(fn)
}
func (c *BaseRewardPool) Copy_MAX_LV() array_int { return c.data.ARRAYINT_MAX_LV.Copy() }

func HasBaseRewardPool(key int64) bool {
	_, ok := _BaseRewardPoolMap[key]
	return ok
}

func GetBaseRewardPool(key int64) *BaseRewardPool {
	return _BaseRewardPoolMap[key]
}

func RangeBaseRewardPool(fn func(i int, row *BaseRewardPool) (stop bool)) {
	for i, row := range _BaseRewardPoolArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseRewardPool() int { return len(_BaseRewardPoolArray) }

func init() {
	loadfn["BaseRewardPool"] = loadBaseRewardPool
}

func loadBaseRewardPool(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseRewardPool.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseRewardPool{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseRewardPool{}
	result_map := map[int64]*BaseRewardPool{}
	for _, row := range datas {
		data := &BaseRewardPool{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_REWARD_POOL] = data
	}
	_BaseRewardPoolArray = result_array
	_BaseRewardPoolMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseRewardPool load finish! ", len(result_array))
	return nil
}
