package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseBuildingStar.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseBuildingStarMap = map[int64]*BaseBuildingStar{}
var _BaseBuildingStarArray = []*BaseBuildingStar{}

type BaseBuildingStar struct {
	data *_BaseBuildingStar
}

// 类型结构
type _BaseBuildingStar struct {
	INT_ID                int64     // ID
	INT_BUILDING_ID       int64     // 建筑ID
	INT_STAR              int64     // 星级
	STR_URL               string    // 建筑形象
	STR_ICON              string    // 图标
	INT_PLAY_TIME         int64     // 游玩时间/毫秒
	INT_TOURIST_CAPACITY  int64     // 游客容量
	INT_STAMINA_REQUIRED  int64     // 体力消耗
	ARRAYINT_STAR_UP_ITEM array_int // 升星需求道具
	ARRAYINT_STAR_UP_NUM  array_int // 需求数量
}

func (c *BaseBuildingStar) ID() int64               { return c.data.INT_ID }               //ID
func (c *BaseBuildingStar) BUILDING_ID() int64      { return c.data.INT_BUILDING_ID }      //建筑ID
func (c *BaseBuildingStar) STAR() int64             { return c.data.INT_STAR }             //星级
func (c *BaseBuildingStar) URL() string             { return c.data.STR_URL }              //建筑形象
func (c *BaseBuildingStar) ICON() string            { return c.data.STR_ICON }             //图标
func (c *BaseBuildingStar) PLAY_TIME() int64        { return c.data.INT_PLAY_TIME }        //游玩时间/毫秒
func (c *BaseBuildingStar) TOURIST_CAPACITY() int64 { return c.data.INT_TOURIST_CAPACITY } //游客容量
func (c *BaseBuildingStar) STAMINA_REQUIRED() int64 { return c.data.INT_STAMINA_REQUIRED } //体力消耗
//升星需求道具
func (c *BaseBuildingStar) Len_STAR_UP_ITEM() int { return c.data.ARRAYINT_STAR_UP_ITEM.Len() }
func (c *BaseBuildingStar) Get_STAR_UP_ITEM(key int) int64 {
	return c.data.ARRAYINT_STAR_UP_ITEM.Get(key)
}
func (c *BaseBuildingStar) Range_STAR_UP_ITEM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_STAR_UP_ITEM.Range(fn)
}
func (c *BaseBuildingStar) Copy_STAR_UP_ITEM() array_int { return c.data.ARRAYINT_STAR_UP_ITEM.Copy() }

//需求数量
func (c *BaseBuildingStar) Len_STAR_UP_NUM() int { return c.data.ARRAYINT_STAR_UP_NUM.Len() }
func (c *BaseBuildingStar) Get_STAR_UP_NUM(key int) int64 {
	return c.data.ARRAYINT_STAR_UP_NUM.Get(key)
}
func (c *BaseBuildingStar) Range_STAR_UP_NUM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_STAR_UP_NUM.Range(fn)
}
func (c *BaseBuildingStar) Copy_STAR_UP_NUM() array_int { return c.data.ARRAYINT_STAR_UP_NUM.Copy() }

func HasBaseBuildingStar(key int64) bool {
	_, ok := _BaseBuildingStarMap[key]
	return ok
}

func GetBaseBuildingStar(key int64) *BaseBuildingStar {
	return _BaseBuildingStarMap[key]
}

func RangeBaseBuildingStar(fn func(i int, row *BaseBuildingStar) (stop bool)) {
	for i, row := range _BaseBuildingStarArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseBuildingStar() int { return len(_BaseBuildingStarArray) }

func init() {
	loadfn["BaseBuildingStar"] = loadBaseBuildingStar
}

func loadBaseBuildingStar(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseBuildingStar.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseBuildingStar{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseBuildingStar{}
	result_map := map[int64]*BaseBuildingStar{}
	for _, row := range datas {
		data := &BaseBuildingStar{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseBuildingStarArray = result_array
	_BaseBuildingStarMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseBuildingStar load finish! ", len(result_array))
	return nil
}
