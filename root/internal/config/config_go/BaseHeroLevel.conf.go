package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseHeroLevel.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseHeroLevelMap = map[int64]*BaseHeroLevel{}
var _BaseHeroLevelArray = []*BaseHeroLevel{}

type BaseHeroLevel struct {
	data *_BaseHeroLevel
}

// 类型结构
type _BaseHeroLevel struct {
	INT_ID                  int64     // ID
	INT_HERO_ID             int64     // 英雄ID
	INT_LEVEL               int64     // 等级
	INT_HAPPINESS_VALUE     int64     // 快乐值
	INT_POWER               int64     // 能力
	INT_MOOD                int64     // 心情
	INT_MAX_PHYSICAL_DEMAND int64     // 体力上限
	ARRAYINT_LEVEL_UP_ITEM  array_int // 升级需求道具
	ARRAYINT_LEVEL_UP_NUM   array_int // 升级需求
}

func (c *BaseHeroLevel) ID() int64                  { return c.data.INT_ID }                  //ID
func (c *BaseHeroLevel) HERO_ID() int64             { return c.data.INT_HERO_ID }             //英雄ID
func (c *BaseHeroLevel) LEVEL() int64               { return c.data.INT_LEVEL }               //等级
func (c *BaseHeroLevel) HAPPINESS_VALUE() int64     { return c.data.INT_HAPPINESS_VALUE }     //快乐值
func (c *BaseHeroLevel) POWER() int64               { return c.data.INT_POWER }               //能力
func (c *BaseHeroLevel) MOOD() int64                { return c.data.INT_MOOD }                //心情
func (c *BaseHeroLevel) MAX_PHYSICAL_DEMAND() int64 { return c.data.INT_MAX_PHYSICAL_DEMAND } //体力上限
//升级需求道具
func (c *BaseHeroLevel) Len_LEVEL_UP_ITEM() int { return c.data.ARRAYINT_LEVEL_UP_ITEM.Len() }
func (c *BaseHeroLevel) Get_LEVEL_UP_ITEM(key int) int64 {
	return c.data.ARRAYINT_LEVEL_UP_ITEM.Get(key)
}
func (c *BaseHeroLevel) Range_LEVEL_UP_ITEM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_LEVEL_UP_ITEM.Range(fn)
}
func (c *BaseHeroLevel) Copy_LEVEL_UP_ITEM() array_int { return c.data.ARRAYINT_LEVEL_UP_ITEM.Copy() }

//升级需求
func (c *BaseHeroLevel) Len_LEVEL_UP_NUM() int          { return c.data.ARRAYINT_LEVEL_UP_NUM.Len() }
func (c *BaseHeroLevel) Get_LEVEL_UP_NUM(key int) int64 { return c.data.ARRAYINT_LEVEL_UP_NUM.Get(key) }
func (c *BaseHeroLevel) Range_LEVEL_UP_NUM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_LEVEL_UP_NUM.Range(fn)
}
func (c *BaseHeroLevel) Copy_LEVEL_UP_NUM() array_int { return c.data.ARRAYINT_LEVEL_UP_NUM.Copy() }

func HasBaseHeroLevel(key int64) bool {
	_, ok := _BaseHeroLevelMap[key]
	return ok
}

func GetBaseHeroLevel(key int64) *BaseHeroLevel {
	return _BaseHeroLevelMap[key]
}

func RangeBaseHeroLevel(fn func(i int, row *BaseHeroLevel) (stop bool)) {
	for i, row := range _BaseHeroLevelArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseHeroLevel() int { return len(_BaseHeroLevelArray) }

func init() {
	loadfn["BaseHeroLevel"] = loadBaseHeroLevel
}

func loadBaseHeroLevel(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseHeroLevel.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseHeroLevel{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseHeroLevel{}
	result_map := map[int64]*BaseHeroLevel{}
	for _, row := range datas {
		data := &BaseHeroLevel{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseHeroLevelArray = result_array
	_BaseHeroLevelMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseHeroLevel load finish! ", len(result_array))
	return nil
}
