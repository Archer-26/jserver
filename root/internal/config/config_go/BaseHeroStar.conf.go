package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseHeroStar.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseHeroStarMap = map[int64]*BaseHeroStar{}
var _BaseHeroStarArray = []*BaseHeroStar{}

type BaseHeroStar struct {
	data *_BaseHeroStar
}

// 类型结构
type _BaseHeroStar struct {
	INT_ID           int64 // ID
	INT_HERO_ID      int64 // 英雄ID
	INT_STAR         int64 // 星级
	INT_PARAM        int64 // 星级系数万分比
	INT_STAR_UP_ITEM int64 // 升星需求道具
	INT_STAR_UP_NUM  int64 // 需求数量
	INT_MAX_LEVEL    int64 // 等级上限
	INT_UNLOCK_SKILL int64 // 技能解锁
}

func (c *BaseHeroStar) ID() int64           { return c.data.INT_ID }           //ID
func (c *BaseHeroStar) HERO_ID() int64      { return c.data.INT_HERO_ID }      //英雄ID
func (c *BaseHeroStar) STAR() int64         { return c.data.INT_STAR }         //星级
func (c *BaseHeroStar) PARAM() int64        { return c.data.INT_PARAM }        //星级系数万分比
func (c *BaseHeroStar) STAR_UP_ITEM() int64 { return c.data.INT_STAR_UP_ITEM } //升星需求道具
func (c *BaseHeroStar) STAR_UP_NUM() int64  { return c.data.INT_STAR_UP_NUM }  //需求数量
func (c *BaseHeroStar) MAX_LEVEL() int64    { return c.data.INT_MAX_LEVEL }    //等级上限
func (c *BaseHeroStar) UNLOCK_SKILL() int64 { return c.data.INT_UNLOCK_SKILL } //技能解锁

func HasBaseHeroStar(key int64) bool {
	_, ok := _BaseHeroStarMap[key]
	return ok
}

func GetBaseHeroStar(key int64) *BaseHeroStar {
	return _BaseHeroStarMap[key]
}

func RangeBaseHeroStar(fn func(i int, row *BaseHeroStar) (stop bool)) {
	for i, row := range _BaseHeroStarArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseHeroStar() int { return len(_BaseHeroStarArray) }

func init() {
	loadfn["BaseHeroStar"] = loadBaseHeroStar
}

func loadBaseHeroStar(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseHeroStar.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseHeroStar{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseHeroStar{}
	result_map := map[int64]*BaseHeroStar{}
	for _, row := range datas {
		data := &BaseHeroStar{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseHeroStarArray = result_array
	_BaseHeroStarMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseHeroStar load finish! ", len(result_array))
	return nil
}
