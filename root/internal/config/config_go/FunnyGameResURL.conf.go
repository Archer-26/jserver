package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: FunnyGameResURL.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _FunnyGameResURLMap = map[int64]*FunnyGameResURL{}
var _FunnyGameResURLArray = []*FunnyGameResURL{}

type FunnyGameResURL struct {
	data *_FunnyGameResURL
}

// 类型结构
type _FunnyGameResURL struct {
	INT_ID  int64  // 道路资源ID
	STR_URL string // 资源路径
}

func (c *FunnyGameResURL) ID() int64   { return c.data.INT_ID }  //道路资源ID
func (c *FunnyGameResURL) URL() string { return c.data.STR_URL } //资源路径

func HasFunnyGameResURL(key int64) bool {
	_, ok := _FunnyGameResURLMap[key]
	return ok
}

func GetFunnyGameResURL(key int64) *FunnyGameResURL {
	return _FunnyGameResURLMap[key]
}

func RangeFunnyGameResURL(fn func(i int, row *FunnyGameResURL) (stop bool)) {
	for i, row := range _FunnyGameResURLArray {
		if fn(i, row) {
			break
		}
	}
}

func LenFunnyGameResURL() int { return len(_FunnyGameResURLArray) }

func init() {
	loadfn["FunnyGameResURL"] = loadFunnyGameResURL
}

func loadFunnyGameResURL(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "FunnyGameResURL.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_FunnyGameResURL{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*FunnyGameResURL{}
	result_map := map[int64]*FunnyGameResURL{}
	for _, row := range datas {
		data := &FunnyGameResURL{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_FunnyGameResURLArray = result_array
	_FunnyGameResURLMap = result_map
	fmt.Printf("%-50v len:%v\n", "FunnyGameResURL load finish! ", len(result_array))
	return nil
}
