package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseReward.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseRewardMap = map[int64]*BaseReward{}
var _BaseRewardArray = []*BaseReward{}

type BaseReward struct {
	data *_BaseReward
}

// 类型结构
type _BaseReward struct {
	INT_REWARD_ID       int64     // 奖励id
	ARRAYINT_ITEM_ID    array_int // 物品id集合
	ARRAYINT_ITEM_COUNT array_int // 物品数量集合
	ARRAYINT_PROB       array_int // 物品几率
	INT_PROB_TYPE       int64     // 几率计算规则
}

func (c *BaseReward) REWARD_ID() int64 { return c.data.INT_REWARD_ID } //奖励id
//物品id集合
func (c *BaseReward) Len_ITEM_ID() int          { return c.data.ARRAYINT_ITEM_ID.Len() }
func (c *BaseReward) Get_ITEM_ID(key int) int64 { return c.data.ARRAYINT_ITEM_ID.Get(key) }
func (c *BaseReward) Range_ITEM_ID(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_ITEM_ID.Range(fn)
}
func (c *BaseReward) Copy_ITEM_ID() array_int { return c.data.ARRAYINT_ITEM_ID.Copy() }

//物品数量集合
func (c *BaseReward) Len_ITEM_COUNT() int          { return c.data.ARRAYINT_ITEM_COUNT.Len() }
func (c *BaseReward) Get_ITEM_COUNT(key int) int64 { return c.data.ARRAYINT_ITEM_COUNT.Get(key) }
func (c *BaseReward) Range_ITEM_COUNT(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_ITEM_COUNT.Range(fn)
}
func (c *BaseReward) Copy_ITEM_COUNT() array_int { return c.data.ARRAYINT_ITEM_COUNT.Copy() }

//物品几率
func (c *BaseReward) Len_PROB() int                              { return c.data.ARRAYINT_PROB.Len() }
func (c *BaseReward) Get_PROB(key int) int64                     { return c.data.ARRAYINT_PROB.Get(key) }
func (c *BaseReward) Range_PROB(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_PROB.Range(fn) }
func (c *BaseReward) Copy_PROB() array_int                       { return c.data.ARRAYINT_PROB.Copy() }
func (c *BaseReward) PROB_TYPE() int64                           { return c.data.INT_PROB_TYPE } //几率计算规则

func HasBaseReward(key int64) bool {
	_, ok := _BaseRewardMap[key]
	return ok
}

func GetBaseReward(key int64) *BaseReward {
	return _BaseRewardMap[key]
}

func RangeBaseReward(fn func(i int, row *BaseReward) (stop bool)) {
	for i, row := range _BaseRewardArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseReward() int { return len(_BaseRewardArray) }

func init() {
	loadfn["BaseReward"] = loadBaseReward
}

func loadBaseReward(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseReward.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseReward{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseReward{}
	result_map := map[int64]*BaseReward{}
	for _, row := range datas {
		data := &BaseReward{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_REWARD_ID] = data
	}
	_BaseRewardArray = result_array
	_BaseRewardMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseReward load finish! ", len(result_array))
	return nil
}
