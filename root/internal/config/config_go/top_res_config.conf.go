package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: TopResConfig.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _Top_res_configMap = map[string]*Top_res_config{}
var _Top_res_configArray = []*Top_res_config{}

type Top_res_config struct {
	data *_Top_res_config
}

// 类型结构
type _Top_res_config struct {
	STR_TYPE       string // ResComponent控制器选项
	INT_RES_TYPE_1 int64  // 顶部条资源1
}

func (c *Top_res_config) TYPE() string      { return c.data.STR_TYPE }       //ResComponent控制器选项
func (c *Top_res_config) RES_TYPE_1() int64 { return c.data.INT_RES_TYPE_1 } //顶部条资源1

func HasTop_res_config(key string) bool {
	_, ok := _Top_res_configMap[key]
	return ok
}

func GetTop_res_config(key string) *Top_res_config {
	return _Top_res_configMap[key]
}

func RangeTop_res_config(fn func(i int, row *Top_res_config) (stop bool)) {
	for i, row := range _Top_res_configArray {
		if fn(i, row) {
			break
		}
	}
}

func LenTop_res_config() int { return len(_Top_res_configArray) }

func init() {
	loadfn["Top_res_config"] = loadTop_res_config
}

func loadTop_res_config(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "top_res_config.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_Top_res_config{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*Top_res_config{}
	result_map := map[string]*Top_res_config{}
	for _, row := range datas {
		data := &Top_res_config{data: row}
		result_array = append(result_array, data)
		result_map[row.STR_TYPE] = data
	}
	_Top_res_configArray = result_array
	_Top_res_configMap = result_map
	fmt.Printf("%-50v len:%v\n", "Top_res_config load finish! ", len(result_array))
	return nil
}
