package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseBuildingAttr.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseBuildingAttrMap = map[int64]*BaseBuildingAttr{}
var _BaseBuildingAttrArray = []*BaseBuildingAttr{}

type BaseBuildingAttr struct {
	data *_BaseBuildingAttr
}

// 类型结构
type _BaseBuildingAttr struct {
	INT_ID                 int64     // ID
	INT_BUILDING_ID        int64     // 建筑ID
	INT_ATTR               int64     // 属性
	INT_LEVEL              int64     // 等级
	ARRAYINT_LEVEL_UP_ITEM array_int // 升级需求道具
	ARRAYINT_LEVEL_UP_NUM  array_int // 升级需求
	INT_VAlUE              int64     // 属性值
}

func (c *BaseBuildingAttr) ID() int64          { return c.data.INT_ID }          //ID
func (c *BaseBuildingAttr) BUILDING_ID() int64 { return c.data.INT_BUILDING_ID } //建筑ID
func (c *BaseBuildingAttr) ATTR() int64        { return c.data.INT_ATTR }        //属性
func (c *BaseBuildingAttr) LEVEL() int64       { return c.data.INT_LEVEL }       //等级
//升级需求道具
func (c *BaseBuildingAttr) Len_LEVEL_UP_ITEM() int { return c.data.ARRAYINT_LEVEL_UP_ITEM.Len() }
func (c *BaseBuildingAttr) Get_LEVEL_UP_ITEM(key int) int64 {
	return c.data.ARRAYINT_LEVEL_UP_ITEM.Get(key)
}
func (c *BaseBuildingAttr) Range_LEVEL_UP_ITEM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_LEVEL_UP_ITEM.Range(fn)
}
func (c *BaseBuildingAttr) Copy_LEVEL_UP_ITEM() array_int {
	return c.data.ARRAYINT_LEVEL_UP_ITEM.Copy()
}

//升级需求
func (c *BaseBuildingAttr) Len_LEVEL_UP_NUM() int { return c.data.ARRAYINT_LEVEL_UP_NUM.Len() }
func (c *BaseBuildingAttr) Get_LEVEL_UP_NUM(key int) int64 {
	return c.data.ARRAYINT_LEVEL_UP_NUM.Get(key)
}
func (c *BaseBuildingAttr) Range_LEVEL_UP_NUM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_LEVEL_UP_NUM.Range(fn)
}
func (c *BaseBuildingAttr) Copy_LEVEL_UP_NUM() array_int { return c.data.ARRAYINT_LEVEL_UP_NUM.Copy() }
func (c *BaseBuildingAttr) VAlUE() int64                 { return c.data.INT_VAlUE } //属性值

func HasBaseBuildingAttr(key int64) bool {
	_, ok := _BaseBuildingAttrMap[key]
	return ok
}

func GetBaseBuildingAttr(key int64) *BaseBuildingAttr {
	return _BaseBuildingAttrMap[key]
}

func RangeBaseBuildingAttr(fn func(i int, row *BaseBuildingAttr) (stop bool)) {
	for i, row := range _BaseBuildingAttrArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseBuildingAttr() int { return len(_BaseBuildingAttrArray) }

func init() {
	loadfn["BaseBuildingAttr"] = loadBaseBuildingAttr
}

func loadBaseBuildingAttr(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseBuildingAttr.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseBuildingAttr{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseBuildingAttr{}
	result_map := map[int64]*BaseBuildingAttr{}
	for _, row := range datas {
		data := &BaseBuildingAttr{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseBuildingAttrArray = result_array
	_BaseBuildingAttrMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseBuildingAttr load finish! ", len(result_array))
	return nil
}
