package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: CherrySlot.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _CherryJackPotMap = map[int64]*CherryJackPot{}
var _CherryJackPotArray = []*CherryJackPot{}

type CherryJackPot struct {
	data *_CherryJackPot
}

// 类型结构
type _CherryJackPot struct {
	INT_ID        int64   // jackpot图案ID
	INT_DftOdds   int64   // 默认倍率
	INT_InitMin   int64   // 初始最小值
	INT_InitMax   int64   // 初始最大值
	FLOAT_IncRate float32 // 增长速度
	INT_RstMin    int64   // 重置最小值
	INT_RstMax    int64   // 重置最大值
}

func (c *CherryJackPot) ID() int64        { return c.data.INT_ID }        //jackpot图案ID
func (c *CherryJackPot) DftOdds() int64   { return c.data.INT_DftOdds }   //默认倍率
func (c *CherryJackPot) InitMin() int64   { return c.data.INT_InitMin }   //初始最小值
func (c *CherryJackPot) InitMax() int64   { return c.data.INT_InitMax }   //初始最大值
func (c *CherryJackPot) IncRate() float32 { return c.data.FLOAT_IncRate } //增长速度
func (c *CherryJackPot) RstMin() int64    { return c.data.INT_RstMin }    //重置最小值
func (c *CherryJackPot) RstMax() int64    { return c.data.INT_RstMax }    //重置最大值

func HasCherryJackPot(key int64) bool {
	_, ok := _CherryJackPotMap[key]
	return ok
}

func GetCherryJackPot(key int64) *CherryJackPot {
	return _CherryJackPotMap[key]
}

func RangeCherryJackPot(fn func(i int, row *CherryJackPot) (stop bool)) {
	for i, row := range _CherryJackPotArray {
		if fn(i, row) {
			break
		}
	}
}

func LenCherryJackPot() int { return len(_CherryJackPotArray) }

func init() {
	loadfn["CherryJackPot"] = loadCherryJackPot
}

func loadCherryJackPot(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "CherryJackPot.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_CherryJackPot{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*CherryJackPot{}
	result_map := map[int64]*CherryJackPot{}
	for _, row := range datas {
		data := &CherryJackPot{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_CherryJackPotArray = result_array
	_CherryJackPotMap = result_map
	fmt.Printf("%-50v len:%v\n", "CherryJackPot load finish! ", len(result_array))
	return nil
}
