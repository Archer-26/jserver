package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: localization.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _LocalizationMap = map[string]*Localization{}
var _LocalizationArray = []*Localization{}

type Localization struct {
	data *_Localization
}

// 类型结构
type _Localization struct {
	STR_ID string // KEY值
}

func (c *Localization) ID() string { return c.data.STR_ID } //KEY值

func HasLocalization(key string) bool {
	_, ok := _LocalizationMap[key]
	return ok
}

func GetLocalization(key string) *Localization {
	return _LocalizationMap[key]
}

func RangeLocalization(fn func(i int, row *Localization) (stop bool)) {
	for i, row := range _LocalizationArray {
		if fn(i, row) {
			break
		}
	}
}

func LenLocalization() int { return len(_LocalizationArray) }

func init() {
	loadfn["Localization"] = loadLocalization
}

func loadLocalization(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "localization.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_Localization{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*Localization{}
	result_map := map[string]*Localization{}
	for _, row := range datas {
		data := &Localization{data: row}
		result_array = append(result_array, data)
		result_map[row.STR_ID] = data
	}
	_LocalizationArray = result_array
	_LocalizationMap = result_map
	fmt.Printf("%-50v len:%v\n", "Localization load finish! ", len(result_array))
	return nil
}
