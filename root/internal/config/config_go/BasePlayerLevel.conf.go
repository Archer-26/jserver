package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BasePlayerLevel.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BasePlayerLevelMap = map[int64]*BasePlayerLevel{}
var _BasePlayerLevelArray = []*BasePlayerLevel{}

type BasePlayerLevel struct {
	data *_BasePlayerLevel
}

// 类型结构
type _BasePlayerLevel struct {
	INT_LEVEL         int64 // 等级
	INT_NEED_EXP      int64 // 需求经验
	INT_MAX_BETTING   int64 // 老虎机注码数
	INT_ISLAND_MAP_ID int64 // 解锁槽位
	INT_REWARD_POOL   int64 // 升级奖励
}

func (c *BasePlayerLevel) LEVEL() int64         { return c.data.INT_LEVEL }         //等级
func (c *BasePlayerLevel) NEED_EXP() int64      { return c.data.INT_NEED_EXP }      //需求经验
func (c *BasePlayerLevel) MAX_BETTING() int64   { return c.data.INT_MAX_BETTING }   //老虎机注码数
func (c *BasePlayerLevel) ISLAND_MAP_ID() int64 { return c.data.INT_ISLAND_MAP_ID } //解锁槽位
func (c *BasePlayerLevel) REWARD_POOL() int64   { return c.data.INT_REWARD_POOL }   //升级奖励

func HasBasePlayerLevel(key int64) bool {
	_, ok := _BasePlayerLevelMap[key]
	return ok
}

func GetBasePlayerLevel(key int64) *BasePlayerLevel {
	return _BasePlayerLevelMap[key]
}

func RangeBasePlayerLevel(fn func(i int, row *BasePlayerLevel) (stop bool)) {
	for i, row := range _BasePlayerLevelArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBasePlayerLevel() int { return len(_BasePlayerLevelArray) }

func init() {
	loadfn["BasePlayerLevel"] = loadBasePlayerLevel
}

func loadBasePlayerLevel(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BasePlayerLevel.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BasePlayerLevel{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BasePlayerLevel{}
	result_map := map[int64]*BasePlayerLevel{}
	for _, row := range datas {
		data := &BasePlayerLevel{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_LEVEL] = data
	}
	_BasePlayerLevelArray = result_array
	_BasePlayerLevelMap = result_map
	fmt.Printf("%-50v len:%v\n", "BasePlayerLevel load finish! ", len(result_array))
	return nil
}
