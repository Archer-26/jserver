package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseConfig.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseConfigMap = map[int64]*BaseConfig{}
var _BaseConfigArray = []*BaseConfig{}

type BaseConfig struct {
	data *_BaseConfig
}

// 类型结构
type _BaseConfig struct {
	INT_ID   int64  // ID
	INT_DATA int64  // 整形数据
	STR_INFO string // 字符串型数据
}

func (c *BaseConfig) ID() int64    { return c.data.INT_ID }   //ID
func (c *BaseConfig) DATA() int64  { return c.data.INT_DATA } //整形数据
func (c *BaseConfig) INFO() string { return c.data.STR_INFO } //字符串型数据

func HasBaseConfig(key int64) bool {
	_, ok := _BaseConfigMap[key]
	return ok
}

func GetBaseConfig(key int64) *BaseConfig {
	return _BaseConfigMap[key]
}

func RangeBaseConfig(fn func(i int, row *BaseConfig) (stop bool)) {
	for i, row := range _BaseConfigArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseConfig() int { return len(_BaseConfigArray) }

func init() {
	loadfn["BaseConfig"] = loadBaseConfig
}

func loadBaseConfig(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseConfig.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseConfig{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseConfig{}
	result_map := map[int64]*BaseConfig{}
	for _, row := range datas {
		data := &BaseConfig{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseConfigArray = result_array
	_BaseConfigMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseConfig load finish! ", len(result_array))
	return nil
}
