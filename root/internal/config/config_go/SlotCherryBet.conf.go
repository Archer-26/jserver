package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: CherrySlot.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _SlotCherryBetMap = map[int64]*SlotCherryBet{}
var _SlotCherryBetArray = []*SlotCherryBet{}

type SlotCherryBet struct {
	data *_SlotCherryBet
}

// 类型结构
type _SlotCherryBet struct {
	INT_ID    int64 // 下注等级
	INT_BET   int64 // 下注金额
	INT_POW   int64 // 折算倍率
	INT_LEVEL int64 // 玩家等级
}

func (c *SlotCherryBet) ID() int64    { return c.data.INT_ID }    //下注等级
func (c *SlotCherryBet) BET() int64   { return c.data.INT_BET }   //下注金额
func (c *SlotCherryBet) POW() int64   { return c.data.INT_POW }   //折算倍率
func (c *SlotCherryBet) LEVEL() int64 { return c.data.INT_LEVEL } //玩家等级

func HasSlotCherryBet(key int64) bool {
	_, ok := _SlotCherryBetMap[key]
	return ok
}

func GetSlotCherryBet(key int64) *SlotCherryBet {
	return _SlotCherryBetMap[key]
}

func RangeSlotCherryBet(fn func(i int, row *SlotCherryBet) (stop bool)) {
	for i, row := range _SlotCherryBetArray {
		if fn(i, row) {
			break
		}
	}
}

func LenSlotCherryBet() int { return len(_SlotCherryBetArray) }

func init() {
	loadfn["SlotCherryBet"] = loadSlotCherryBet
}

func loadSlotCherryBet(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "SlotCherryBet.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_SlotCherryBet{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*SlotCherryBet{}
	result_map := map[int64]*SlotCherryBet{}
	for _, row := range datas {
		data := &SlotCherryBet{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_SlotCherryBetArray = result_array
	_SlotCherryBetMap = result_map
	fmt.Printf("%-50v len:%v\n", "SlotCherryBet load finish! ", len(result_array))
	return nil
}
