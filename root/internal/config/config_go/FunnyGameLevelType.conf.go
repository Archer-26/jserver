package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: FunnyGameLevelType.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _FunnyGameLevelTypeMap = map[int64]*FunnyGameLevelType{}
var _FunnyGameLevelTypeArray = []*FunnyGameLevelType{}

type FunnyGameLevelType struct {
	data *_FunnyGameLevelType
}

// 类型结构
type _FunnyGameLevelType struct {
	INT_ID                 int64     // ID
	INT_FUNNYGAME_LEVEL_ID int64     // 关卡ID
	INT_GAMETYPE           int64     // 游戏类型
	STR_FLOOR_URL          string    // 关卡背景资源路径
	STR_DECORATE_URL       string    // 关卡装饰资源路径
	INT_BOSSBLOOD          int64     // 关卡Boss血量
	ARRAYINT_CAMERA_RECT   array_int // 相机范围
}

func (c *FunnyGameLevelType) ID() int64                 { return c.data.INT_ID }                 //ID
func (c *FunnyGameLevelType) FUNNYGAME_LEVEL_ID() int64 { return c.data.INT_FUNNYGAME_LEVEL_ID } //关卡ID
func (c *FunnyGameLevelType) GAMETYPE() int64           { return c.data.INT_GAMETYPE }           //游戏类型
func (c *FunnyGameLevelType) FLOOR_URL() string         { return c.data.STR_FLOOR_URL }          //关卡背景资源路径
func (c *FunnyGameLevelType) DECORATE_URL() string      { return c.data.STR_DECORATE_URL }       //关卡装饰资源路径
func (c *FunnyGameLevelType) BOSSBLOOD() int64          { return c.data.INT_BOSSBLOOD }          //关卡Boss血量
//相机范围
func (c *FunnyGameLevelType) Len_CAMERA_RECT() int { return c.data.ARRAYINT_CAMERA_RECT.Len() }
func (c *FunnyGameLevelType) Get_CAMERA_RECT(key int) int64 {
	return c.data.ARRAYINT_CAMERA_RECT.Get(key)
}
func (c *FunnyGameLevelType) Range_CAMERA_RECT(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_CAMERA_RECT.Range(fn)
}
func (c *FunnyGameLevelType) Copy_CAMERA_RECT() array_int { return c.data.ARRAYINT_CAMERA_RECT.Copy() }

func HasFunnyGameLevelType(key int64) bool {
	_, ok := _FunnyGameLevelTypeMap[key]
	return ok
}

func GetFunnyGameLevelType(key int64) *FunnyGameLevelType {
	return _FunnyGameLevelTypeMap[key]
}

func RangeFunnyGameLevelType(fn func(i int, row *FunnyGameLevelType) (stop bool)) {
	for i, row := range _FunnyGameLevelTypeArray {
		if fn(i, row) {
			break
		}
	}
}

func LenFunnyGameLevelType() int { return len(_FunnyGameLevelTypeArray) }

func init() {
	loadfn["FunnyGameLevelType"] = loadFunnyGameLevelType
}

func loadFunnyGameLevelType(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "FunnyGameLevelType.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_FunnyGameLevelType{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*FunnyGameLevelType{}
	result_map := map[int64]*FunnyGameLevelType{}
	for _, row := range datas {
		data := &FunnyGameLevelType{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_FunnyGameLevelTypeArray = result_array
	_FunnyGameLevelTypeMap = result_map
	fmt.Printf("%-50v len:%v\n", "FunnyGameLevelType load finish! ", len(result_array))
	return nil
}
