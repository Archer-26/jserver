package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: CherrySlot.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _SlotCherryPatternMap = map[int64]*SlotCherryPattern{}
var _SlotCherryPatternArray = []*SlotCherryPattern{}

type SlotCherryPattern struct {
	data *_SlotCherryPattern
}

// 类型结构
type _SlotCherryPattern struct {
	INT_ID                     int64     // 图案
	ARRAYINT_LINE              array_int // 连续个数赔率
	INT_PROBABILITY_REEL3      int64     // Bouns 第三列随机权重
	INT_PROBABILITY_OTHER_REEL int64     // Bouns 其他列随机权重
	INT_BOUNS_ODDS             int64     // Bouns赔率
}

func (c *SlotCherryPattern) ID() int64 { return c.data.INT_ID } //图案
//连续个数赔率
func (c *SlotCherryPattern) Len_LINE() int          { return c.data.ARRAYINT_LINE.Len() }
func (c *SlotCherryPattern) Get_LINE(key int) int64 { return c.data.ARRAYINT_LINE.Get(key) }
func (c *SlotCherryPattern) Range_LINE(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_LINE.Range(fn)
}
func (c *SlotCherryPattern) Copy_LINE() array_int          { return c.data.ARRAYINT_LINE.Copy() }
func (c *SlotCherryPattern) PROBABILITY_REEL3() int64      { return c.data.INT_PROBABILITY_REEL3 }      //Bouns 第三列随机权重
func (c *SlotCherryPattern) PROBABILITY_OTHER_REEL() int64 { return c.data.INT_PROBABILITY_OTHER_REEL } //Bouns 其他列随机权重
func (c *SlotCherryPattern) BOUNS_ODDS() int64             { return c.data.INT_BOUNS_ODDS }             //Bouns赔率

func HasSlotCherryPattern(key int64) bool {
	_, ok := _SlotCherryPatternMap[key]
	return ok
}

func GetSlotCherryPattern(key int64) *SlotCherryPattern {
	return _SlotCherryPatternMap[key]
}

func RangeSlotCherryPattern(fn func(i int, row *SlotCherryPattern) (stop bool)) {
	for i, row := range _SlotCherryPatternArray {
		if fn(i, row) {
			break
		}
	}
}

func LenSlotCherryPattern() int { return len(_SlotCherryPatternArray) }

func init() {
	loadfn["SlotCherryPattern"] = loadSlotCherryPattern
}

func loadSlotCherryPattern(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "SlotCherryPattern.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_SlotCherryPattern{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*SlotCherryPattern{}
	result_map := map[int64]*SlotCherryPattern{}
	for _, row := range datas {
		data := &SlotCherryPattern{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_SlotCherryPatternArray = result_array
	_SlotCherryPatternMap = result_map
	fmt.Printf("%-50v len:%v\n", "SlotCherryPattern load finish! ", len(result_array))
	return nil
}
