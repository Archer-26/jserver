package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BasePveWave.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BasePveWaveMap = map[int64]*BasePveWave{}
var _BasePveWaveArray = []*BasePveWave{}

type BasePveWave struct {
	data *_BasePveWave
}

// 类型结构
type _BasePveWave struct {
	INT_ID                 int64     // 波数ID
	ARRAYINT_TOURIST_ID    array_int // 游客类型组
	ARRAYINT_TOURIST_NUM   array_int // 游客数量
	ARRAYINT_INTERVAL_TIME array_int // 间隔时间(ms)
}

func (c *BasePveWave) ID() int64 { return c.data.INT_ID } //波数ID
//游客类型组
func (c *BasePveWave) Len_TOURIST_ID() int          { return c.data.ARRAYINT_TOURIST_ID.Len() }
func (c *BasePveWave) Get_TOURIST_ID(key int) int64 { return c.data.ARRAYINT_TOURIST_ID.Get(key) }
func (c *BasePveWave) Range_TOURIST_ID(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_TOURIST_ID.Range(fn)
}
func (c *BasePveWave) Copy_TOURIST_ID() array_int { return c.data.ARRAYINT_TOURIST_ID.Copy() }

//游客数量
func (c *BasePveWave) Len_TOURIST_NUM() int          { return c.data.ARRAYINT_TOURIST_NUM.Len() }
func (c *BasePveWave) Get_TOURIST_NUM(key int) int64 { return c.data.ARRAYINT_TOURIST_NUM.Get(key) }
func (c *BasePveWave) Range_TOURIST_NUM(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_TOURIST_NUM.Range(fn)
}
func (c *BasePveWave) Copy_TOURIST_NUM() array_int { return c.data.ARRAYINT_TOURIST_NUM.Copy() }

//间隔时间(ms)
func (c *BasePveWave) Len_INTERVAL_TIME() int          { return c.data.ARRAYINT_INTERVAL_TIME.Len() }
func (c *BasePveWave) Get_INTERVAL_TIME(key int) int64 { return c.data.ARRAYINT_INTERVAL_TIME.Get(key) }
func (c *BasePveWave) Range_INTERVAL_TIME(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_INTERVAL_TIME.Range(fn)
}
func (c *BasePveWave) Copy_INTERVAL_TIME() array_int { return c.data.ARRAYINT_INTERVAL_TIME.Copy() }

func HasBasePveWave(key int64) bool {
	_, ok := _BasePveWaveMap[key]
	return ok
}

func GetBasePveWave(key int64) *BasePveWave {
	return _BasePveWaveMap[key]
}

func RangeBasePveWave(fn func(i int, row *BasePveWave) (stop bool)) {
	for i, row := range _BasePveWaveArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBasePveWave() int { return len(_BasePveWaveArray) }

func init() {
	loadfn["BasePveWave"] = loadBasePveWave
}

func loadBasePveWave(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BasePveWave.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BasePveWave{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BasePveWave{}
	result_map := map[int64]*BasePveWave{}
	for _, row := range datas {
		data := &BasePveWave{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BasePveWaveArray = result_array
	_BasePveWaveMap = result_map
	fmt.Printf("%-50v len:%v\n", "BasePveWave load finish! ", len(result_array))
	return nil
}
