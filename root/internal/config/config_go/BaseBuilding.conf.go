package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseBuilding.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseBuildingMap = map[int64]*BaseBuilding{}
var _BaseBuildingArray = []*BaseBuilding{}

type BaseBuilding struct {
	data *_BaseBuilding
}

// 类型结构
type _BaseBuilding struct {
	INT_ID               int64  // 建筑ID
	STR_BUILDING_NAME    string // 建筑名称
	INT_QUALITY          int64  // 品质
	INT_HERO_ID          int64  // 解锁主管
	INT_SIZE             int64  // 占地大小
	INT_TYPE             int64  // 类型
	INT_PVE_STAGE_UNLOCK int64  // 解锁关卡
}

func (c *BaseBuilding) ID() int64               { return c.data.INT_ID }               //建筑ID
func (c *BaseBuilding) BUILDING_NAME() string   { return c.data.STR_BUILDING_NAME }    //建筑名称
func (c *BaseBuilding) QUALITY() int64          { return c.data.INT_QUALITY }          //品质
func (c *BaseBuilding) HERO_ID() int64          { return c.data.INT_HERO_ID }          //解锁主管
func (c *BaseBuilding) SIZE() int64             { return c.data.INT_SIZE }             //占地大小
func (c *BaseBuilding) TYPE() int64             { return c.data.INT_TYPE }             //类型
func (c *BaseBuilding) PVE_STAGE_UNLOCK() int64 { return c.data.INT_PVE_STAGE_UNLOCK } //解锁关卡

func HasBaseBuilding(key int64) bool {
	_, ok := _BaseBuildingMap[key]
	return ok
}

func GetBaseBuilding(key int64) *BaseBuilding {
	return _BaseBuildingMap[key]
}

func RangeBaseBuilding(fn func(i int, row *BaseBuilding) (stop bool)) {
	for i, row := range _BaseBuildingArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseBuilding() int { return len(_BaseBuildingArray) }

func init() {
	loadfn["BaseBuilding"] = loadBaseBuilding
}

func loadBaseBuilding(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseBuilding.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseBuilding{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseBuilding{}
	result_map := map[int64]*BaseBuilding{}
	for _, row := range datas {
		data := &BaseBuilding{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseBuildingArray = result_array
	_BaseBuildingMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseBuilding load finish! ", len(result_array))
	return nil
}
