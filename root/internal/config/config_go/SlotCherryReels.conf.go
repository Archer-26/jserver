package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: CherrySlot.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _SlotCherryReelsMap = map[int64]*SlotCherryReels{}
var _SlotCherryReelsArray = []*SlotCherryReels{}

type SlotCherryReels struct {
	data *_SlotCherryReels
}

// 类型结构
type _SlotCherryReels struct {
	INT_ID             int64     // 唯一ID
	ARRAYINT_REEL      array_int // Base表盘
	ARRAYINT_OPTION_1  array_int // Option1表盘
	ARRAYINT_OPTION_2  array_int // Option2表盘
	ARRAYINT_SLELCTION array_int // Selection表盘
	ARRAYINT_FREE      array_int // Free表盘
}

func (c *SlotCherryReels) ID() int64 { return c.data.INT_ID } //唯一ID
//Base表盘
func (c *SlotCherryReels) Len_REEL() int                              { return c.data.ARRAYINT_REEL.Len() }
func (c *SlotCherryReels) Get_REEL(key int) int64                     { return c.data.ARRAYINT_REEL.Get(key) }
func (c *SlotCherryReels) Range_REEL(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_REEL.Range(fn) }
func (c *SlotCherryReels) Copy_REEL() array_int                       { return c.data.ARRAYINT_REEL.Copy() }

//Option1表盘
func (c *SlotCherryReels) Len_OPTION_1() int          { return c.data.ARRAYINT_OPTION_1.Len() }
func (c *SlotCherryReels) Get_OPTION_1(key int) int64 { return c.data.ARRAYINT_OPTION_1.Get(key) }
func (c *SlotCherryReels) Range_OPTION_1(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_OPTION_1.Range(fn)
}
func (c *SlotCherryReels) Copy_OPTION_1() array_int { return c.data.ARRAYINT_OPTION_1.Copy() }

//Option2表盘
func (c *SlotCherryReels) Len_OPTION_2() int          { return c.data.ARRAYINT_OPTION_2.Len() }
func (c *SlotCherryReels) Get_OPTION_2(key int) int64 { return c.data.ARRAYINT_OPTION_2.Get(key) }
func (c *SlotCherryReels) Range_OPTION_2(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_OPTION_2.Range(fn)
}
func (c *SlotCherryReels) Copy_OPTION_2() array_int { return c.data.ARRAYINT_OPTION_2.Copy() }

//Selection表盘
func (c *SlotCherryReels) Len_SLELCTION() int          { return c.data.ARRAYINT_SLELCTION.Len() }
func (c *SlotCherryReels) Get_SLELCTION(key int) int64 { return c.data.ARRAYINT_SLELCTION.Get(key) }
func (c *SlotCherryReels) Range_SLELCTION(fn func(int, int64) (stop bool)) {
	c.data.ARRAYINT_SLELCTION.Range(fn)
}
func (c *SlotCherryReels) Copy_SLELCTION() array_int { return c.data.ARRAYINT_SLELCTION.Copy() }

//Free表盘
func (c *SlotCherryReels) Len_FREE() int                              { return c.data.ARRAYINT_FREE.Len() }
func (c *SlotCherryReels) Get_FREE(key int) int64                     { return c.data.ARRAYINT_FREE.Get(key) }
func (c *SlotCherryReels) Range_FREE(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_FREE.Range(fn) }
func (c *SlotCherryReels) Copy_FREE() array_int                       { return c.data.ARRAYINT_FREE.Copy() }

func HasSlotCherryReels(key int64) bool {
	_, ok := _SlotCherryReelsMap[key]
	return ok
}

func GetSlotCherryReels(key int64) *SlotCherryReels {
	return _SlotCherryReelsMap[key]
}

func RangeSlotCherryReels(fn func(i int, row *SlotCherryReels) (stop bool)) {
	for i, row := range _SlotCherryReelsArray {
		if fn(i, row) {
			break
		}
	}
}

func LenSlotCherryReels() int { return len(_SlotCherryReelsArray) }

func init() {
	loadfn["SlotCherryReels"] = loadSlotCherryReels
}

func loadSlotCherryReels(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "SlotCherryReels.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_SlotCherryReels{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*SlotCherryReels{}
	result_map := map[int64]*SlotCherryReels{}
	for _, row := range datas {
		data := &SlotCherryReels{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_SlotCherryReelsArray = result_array
	_SlotCherryReelsMap = result_map
	fmt.Printf("%-50v len:%v\n", "SlotCherryReels load finish! ", len(result_array))
	return nil
}
