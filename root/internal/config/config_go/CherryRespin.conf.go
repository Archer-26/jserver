package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: CherrySlot.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _CherryRespinMap = map[int64]*CherryRespin{}
var _CherryRespinArray = []*CherryRespin{}

type CherryRespin struct {
	data *_CherryRespin
}

// 类型结构
type _CherryRespin struct {
	INT_ID         int64     // respin次数
	ARRAYINT_REEL1 array_int // reel1需要数量
	ARRAYINT_REEL2 array_int // reel2需要数量
	ARRAYINT_REEL3 array_int // reel3需要数量
	ARRAYINT_REEL4 array_int // reel4需要数量
	ARRAYINT_REEL5 array_int // reel5需要数量
}

func (c *CherryRespin) ID() int64 { return c.data.INT_ID } //respin次数
//reel1需要数量
func (c *CherryRespin) Len_REEL1() int                              { return c.data.ARRAYINT_REEL1.Len() }
func (c *CherryRespin) Get_REEL1(key int) int64                     { return c.data.ARRAYINT_REEL1.Get(key) }
func (c *CherryRespin) Range_REEL1(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_REEL1.Range(fn) }
func (c *CherryRespin) Copy_REEL1() array_int                       { return c.data.ARRAYINT_REEL1.Copy() }

//reel2需要数量
func (c *CherryRespin) Len_REEL2() int                              { return c.data.ARRAYINT_REEL2.Len() }
func (c *CherryRespin) Get_REEL2(key int) int64                     { return c.data.ARRAYINT_REEL2.Get(key) }
func (c *CherryRespin) Range_REEL2(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_REEL2.Range(fn) }
func (c *CherryRespin) Copy_REEL2() array_int                       { return c.data.ARRAYINT_REEL2.Copy() }

//reel3需要数量
func (c *CherryRespin) Len_REEL3() int                              { return c.data.ARRAYINT_REEL3.Len() }
func (c *CherryRespin) Get_REEL3(key int) int64                     { return c.data.ARRAYINT_REEL3.Get(key) }
func (c *CherryRespin) Range_REEL3(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_REEL3.Range(fn) }
func (c *CherryRespin) Copy_REEL3() array_int                       { return c.data.ARRAYINT_REEL3.Copy() }

//reel4需要数量
func (c *CherryRespin) Len_REEL4() int                              { return c.data.ARRAYINT_REEL4.Len() }
func (c *CherryRespin) Get_REEL4(key int) int64                     { return c.data.ARRAYINT_REEL4.Get(key) }
func (c *CherryRespin) Range_REEL4(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_REEL4.Range(fn) }
func (c *CherryRespin) Copy_REEL4() array_int                       { return c.data.ARRAYINT_REEL4.Copy() }

//reel5需要数量
func (c *CherryRespin) Len_REEL5() int                              { return c.data.ARRAYINT_REEL5.Len() }
func (c *CherryRespin) Get_REEL5(key int) int64                     { return c.data.ARRAYINT_REEL5.Get(key) }
func (c *CherryRespin) Range_REEL5(fn func(int, int64) (stop bool)) { c.data.ARRAYINT_REEL5.Range(fn) }
func (c *CherryRespin) Copy_REEL5() array_int                       { return c.data.ARRAYINT_REEL5.Copy() }

func HasCherryRespin(key int64) bool {
	_, ok := _CherryRespinMap[key]
	return ok
}

func GetCherryRespin(key int64) *CherryRespin {
	return _CherryRespinMap[key]
}

func RangeCherryRespin(fn func(i int, row *CherryRespin) (stop bool)) {
	for i, row := range _CherryRespinArray {
		if fn(i, row) {
			break
		}
	}
}

func LenCherryRespin() int { return len(_CherryRespinArray) }

func init() {
	loadfn["CherryRespin"] = loadCherryRespin
}

func loadCherryRespin(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "CherryRespin.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_CherryRespin{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*CherryRespin{}
	result_map := map[int64]*CherryRespin{}
	for _, row := range datas {
		data := &CherryRespin{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_CherryRespinArray = result_array
	_CherryRespinMap = result_map
	fmt.Printf("%-50v len:%v\n", "CherryRespin load finish! ", len(result_array))
	return nil
}
