package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: Const.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _ConstMap = map[string]*Const{}
var _ConstArray = []*Const{}

type Const struct {
	data *_Const
}

// 类型结构
type _Const struct {
	STR_CONST string
	STR_DES   string
	INT_TYPE  int64
}

func (c *Const) CONST() string { return c.data.STR_CONST } //
func (c *Const) DES() string   { return c.data.STR_DES }   //
func (c *Const) TYPE() int64   { return c.data.INT_TYPE }  //

func HasConst(key string) bool {
	_, ok := _ConstMap[key]
	return ok
}

func GetConst(key string) *Const {
	return _ConstMap[key]
}

func RangeConst(fn func(i int, row *Const) (stop bool)) {
	for i, row := range _ConstArray {
		if fn(i, row) {
			break
		}
	}
}

func LenConst() int { return len(_ConstArray) }

func init() {
	loadfn["Const"] = loadConst
}

func loadConst(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "Const.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_Const{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*Const{}
	result_map := map[string]*Const{}
	for _, row := range datas {
		data := &Const{data: row}
		result_array = append(result_array, data)
		result_map[row.STR_CONST] = data
	}
	_ConstArray = result_array
	_ConstMap = result_map
	fmt.Printf("%-50v len:%v\n", "Const load finish! ", len(result_array))
	return nil
}
