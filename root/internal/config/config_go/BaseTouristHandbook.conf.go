package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: BaseTouristHandbook.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _BaseTouristHandbookMap = map[int64]*BaseTouristHandbook{}
var _BaseTouristHandbookArray = []*BaseTouristHandbook{}

type BaseTouristHandbook struct {
	data *_BaseTouristHandbook
}

// 类型结构
type _BaseTouristHandbook struct {
	INT_ID               int64  // ID
	STR_URL              string // 形象
	STR_ICON_URL         string // 形象Icon
	INT_QUALITY          int64  // 品质/显示用
	INT_LIKE_BUILDING    int64  // 设施偏好
	STR_DES              string // 图鉴文本
	INT_PVE_STAGE_UNLOCK int64  // 对应哪个关卡才解锁
}

func (c *BaseTouristHandbook) ID() int64               { return c.data.INT_ID }               //ID
func (c *BaseTouristHandbook) URL() string             { return c.data.STR_URL }              //形象
func (c *BaseTouristHandbook) ICON_URL() string        { return c.data.STR_ICON_URL }         //形象Icon
func (c *BaseTouristHandbook) QUALITY() int64          { return c.data.INT_QUALITY }          //品质/显示用
func (c *BaseTouristHandbook) LIKE_BUILDING() int64    { return c.data.INT_LIKE_BUILDING }    //设施偏好
func (c *BaseTouristHandbook) DES() string             { return c.data.STR_DES }              //图鉴文本
func (c *BaseTouristHandbook) PVE_STAGE_UNLOCK() int64 { return c.data.INT_PVE_STAGE_UNLOCK } //对应哪个关卡才解锁

func HasBaseTouristHandbook(key int64) bool {
	_, ok := _BaseTouristHandbookMap[key]
	return ok
}

func GetBaseTouristHandbook(key int64) *BaseTouristHandbook {
	return _BaseTouristHandbookMap[key]
}

func RangeBaseTouristHandbook(fn func(i int, row *BaseTouristHandbook) (stop bool)) {
	for i, row := range _BaseTouristHandbookArray {
		if fn(i, row) {
			break
		}
	}
}

func LenBaseTouristHandbook() int { return len(_BaseTouristHandbookArray) }

func init() {
	loadfn["BaseTouristHandbook"] = loadBaseTouristHandbook
}

func loadBaseTouristHandbook(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "BaseTouristHandbook.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_BaseTouristHandbook{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*BaseTouristHandbook{}
	result_map := map[int64]*BaseTouristHandbook{}
	for _, row := range datas {
		data := &BaseTouristHandbook{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_BaseTouristHandbookArray = result_array
	_BaseTouristHandbookMap = result_map
	fmt.Printf("%-50v len:%v\n", "BaseTouristHandbook load finish! ", len(result_array))
	return nil
}
