package config_go

// Code generated by excelExoprt. DO NOT EDIT.
// source: CherrySlot.xlsx

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"path"
)

// array and map
var _CherrySummaryMap = map[int64]*CherrySummary{}
var _CherrySummaryArray = []*CherrySummary{}

type CherrySummary struct {
	data *_CherrySummary
}

// 类型结构
type _CherrySummary struct {
	INT_ID     int64
	INT_RATE_1 int64 // option1 使用概率
	INT_RATE_2 int64 // option2 使用概率
}

func (c *CherrySummary) ID() int64     { return c.data.INT_ID }     //
func (c *CherrySummary) RATE_1() int64 { return c.data.INT_RATE_1 } //option1 使用概率
func (c *CherrySummary) RATE_2() int64 { return c.data.INT_RATE_2 } //option2 使用概率

func HasCherrySummary(key int64) bool {
	_, ok := _CherrySummaryMap[key]
	return ok
}

func GetCherrySummary(key int64) *CherrySummary {
	return _CherrySummaryMap[key]
}

func RangeCherrySummary(fn func(i int, row *CherrySummary) (stop bool)) {
	for i, row := range _CherrySummaryArray {
		if fn(i, row) {
			break
		}
	}
}

func LenCherrySummary() int { return len(_CherrySummaryArray) }

func init() {
	loadfn["CherrySummary"] = loadCherrySummary
}

func loadCherrySummary(dir string) error {
	data, err := ioutil.ReadFile(path.Join(dir, "CherrySummary.json"))
	if err != nil {
		return fmt.Errorf("file=%v read err=%v", err.Error())
	}

	datas := []*_CherrySummary{}
	err = json.Unmarshal(data, &datas)
	if err != nil {
		return fmt.Errorf("file=%v parse err=%v", err.Error())
	}

	result_array := []*CherrySummary{}
	result_map := map[int64]*CherrySummary{}
	for _, row := range datas {
		data := &CherrySummary{data: row}
		result_array = append(result_array, data)
		result_map[row.INT_ID] = data
	}
	_CherrySummaryArray = result_array
	_CherrySummaryMap = result_map
	fmt.Printf("%-50v len:%v\n", "CherrySummary load finish! ", len(result_array))
	return nil
}
